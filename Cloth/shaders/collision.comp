#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};
layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};
layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionT[];
};
const float R = 0.5;
const float fix = 0.05f;
void main()
{
	vec3 center = vec3(-0.05, -0.5, -0.1);
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;

	if (distance(positionT[gid].xyz, center) < R){
		vec3 dir = normalize(positionT[gid].xyz - center);
		positionT[gid].xyz += dir * (R - distance(positionT[gid].xyz, center)) * fix;
	}
	/*if (positionT[gid].y < -0.5 && positionT[gid].z > -0.2 && positionT[gid].z < 0.2
	&& positionT[gid].x> -0.2 && positionT[gid].x < 0.2){	
		positionT[gid].xyz += vec3(0,1,0) * (-0.5 - positionT[gid].y) * fix;
	}*/
	if (positionT[gid].y < -1){	
		positionT[gid].xyz += vec3(0,1,0) * (-1 - positionT[gid].y) * fix;
	}
	if (positionT[gid].z > 0.8){	
		positionT[gid].xyz += vec3(0,0,1) * (0.8 - positionT[gid].z) * fix;
	}
}