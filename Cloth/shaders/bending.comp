#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};
layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};
layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionT[];
};
const float fix = 0.00003f;

vec3 antibend(int offsX, int offsY){
	if (gl_GlobalInvocationID.y + offsY < 0 || gl_GlobalInvocationID.y + offsY > 2 * gl_WorkGroupSize.y - 1 ||
	gl_GlobalInvocationID.x + offsX < 0 || gl_GlobalInvocationID.x + offsX > 2 * gl_WorkGroupSize.x - 1 || 
	gl_GlobalInvocationID.y - offsY < 0 || gl_GlobalInvocationID.y - offsY > 2 * gl_WorkGroupSize.y - 1 ||
	gl_GlobalInvocationID.x - offsX < 0 || gl_GlobalInvocationID.x - offsX > 2 * gl_WorkGroupSize.x - 1)
		return vec3(0,0,0);
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;

	uint gid1 = (gl_GlobalInvocationID.y + offsY) * gl_NumWorkGroups.x * gl_WorkGroupSize.x + (gl_GlobalInvocationID.x + offsX);
	uint gid2 = (gl_GlobalInvocationID.y - offsY) * gl_NumWorkGroups.x * gl_WorkGroupSize.x + (gl_GlobalInvocationID.x - offsX);
	vec3 middle = (positionT[gid1].xyz + positionT[gid2].xyz) / 2;
	vec3 dir = (middle - positionT[gid].xyz);
	return dir;
}

void main()
{
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	vec3 final = vec3(0,0,0);
	final += antibend(1, 0);
	final += antibend(1, 1);
	final += antibend(0, 1);
	final += antibend(1, -1);

	positionT[gid].xyz += final * fix;
}