#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};
layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};
layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionT[];
};
layout(std430, binding = 3) buffer normalBuffer
{
	vec4 normal[];
};
uniform float dt;
const float damp = 0.96f;

vec3 direction(uint offsX, uint offsY){
	uint ax = offsX;
	uint bx = -offsX;
	uint ay = offsY;
	uint by = -offsY;
	/*if (gl_GlobalInvocationID.y + offsY < 0 || gl_GlobalInvocationID.y + offsY > 2 * gl_WorkGroupSize.y - 1 ||
	gl_GlobalInvocationID.x + offsX < 0 || gl_GlobalInvocationID.x + offsX > 2 * gl_WorkGroupSize.x - 1 || 
	gl_GlobalInvocationID.y - offsY < 0 || gl_GlobalInvocationID.y - offsY > 2 * gl_WorkGroupSize.y - 1 ||
	gl_GlobalInvocationID.x - offsX < 0 || gl_GlobalInvocationID.x - offsX > 2 * gl_WorkGroupSize.x - 1)
		return vec3(0,0,0);*/
	if(gl_GlobalInvocationID.y + ay < 0){
		ay = 0;
	}
	if(gl_GlobalInvocationID.y + ay > 2 * gl_WorkGroupSize.y - 1){
		ay = 0;
	}
	if(gl_GlobalInvocationID.y + by < 0){
		by = 0;
	}
	if(gl_GlobalInvocationID.y + by > 2 * gl_WorkGroupSize.y - 1){
		by = 0;
	}
	if(gl_GlobalInvocationID.x + ax < 0){
		ax = 0;
	}
	if(gl_GlobalInvocationID.x + ax > 2 * gl_WorkGroupSize.x - 1){
		ax = 0;
	}
	if(gl_GlobalInvocationID.x + bx < 0){
		bx = 0;
	}
	if(gl_GlobalInvocationID.x + bx > 2 * gl_WorkGroupSize.x - 1){
		bx = 0;
	}
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;

	uint gid1 = (gl_GlobalInvocationID.y + ay) * gl_NumWorkGroups.x * gl_WorkGroupSize.x + (gl_GlobalInvocationID.x + ax);
	uint gid2 = (gl_GlobalInvocationID.y + by) * gl_NumWorkGroups.x * gl_WorkGroupSize.x + (gl_GlobalInvocationID.x + bx);
	vec3 dir = normalize(positionT[gid1].xyz - positionT[gid2].xyz);
	return dir;
}

void main()
{
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	velocity[gid].xyz = (positionT[gid].xyz -  position[gid].xyz) / dt;
	position[gid].xyz = positionT[gid].xyz * damp;
	vec3 dirX = direction(-1, 0);
	vec3 dirY = direction(0, -1);
	normal[gid].xyz = normalize(cross(dirX, dirY));
}