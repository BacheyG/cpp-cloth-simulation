#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};
layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};
layout(std430, binding = 2) buffer positionBufferTmp
{
	vec4 positionT[];
};
uniform float d;
const float fix = 0.03f;

void main()
{
	uint gid = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	vec3 dp = vec3(0);
	for (int x = -1; x <= 1; ++x){
		for (int y = -1; y <= 1; ++y){
			if (gl_GlobalInvocationID.y + y < 0 || gl_GlobalInvocationID.y + y > 2 * gl_WorkGroupSize.y - 1 ||
			gl_GlobalInvocationID.x + x < 0 || gl_GlobalInvocationID.x + x > 2 * gl_WorkGroupSize.x - 1)
				continue;

			uint _gid = (gl_GlobalInvocationID.y + y) * gl_NumWorkGroups.x * gl_WorkGroupSize.x + (gl_GlobalInvocationID.x + x);
			
			if (_gid == gid) continue;

			float dis = d;
			if (x != 0 && y != 0) dis *= sqrt(2);

			vec3 dir = positionT[_gid].xyz - positionT[gid].xyz;
			//positionT[gid].xyz += dir * fix * d;
			dp += dir / length(dir) * (length(dir) - dis)* 0.5 * fix;
		}
	}
	positionT[gid].xyz += dp;
}

